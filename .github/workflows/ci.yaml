name: "build"

on:
  pull_request:
    paths-ignore:
      - ".docs/**"
  push:
    branches:
      - "master"
    tags:
      - v*
  schedule:
    - cron: "0 8 * * 1" # At 08:00 on Monday

env:
  extensions: "json"
  cache-version: "1"
  composer-version: "v1"
  composer-install: "composer update --no-interaction --no-progress --no-suggest --prefer-dist --prefer-stable"
  coverage: "none"

jobs:
  jslint:
    name: "Code linting"
    runs-on: "${{ matrix.operating-system }}"

    strategy:
      matrix:
        operating-system: ["ubuntu-latest"]
      fail-fast: false

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v2"

      - name: "Setup node"
        uses: "actions/setup-node@v1"
        with:
          node-version: "12"

      - name: "Get yarn cache directory path"
        id: "yarn-cache-dir-path"
        run: 'echo "::set-output name=dir::$(yarn cache dir)"'

      - uses: "actions/cache@v1"
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-node-modules-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-
            ${{ runner.os }}-
      - name: "Install dependencies"
        if: steps.yarn-cache.outputs.cache-hit != 'true'
        run: 'yarn install'

      - name: "Check linter"
        run: 'yarn lint:js'

  stylelint:
    name: "Styles linting"
    runs-on: "${{ matrix.operating-system }}"

    strategy:
      matrix:
        operating-system: ["ubuntu-latest"]
      fail-fast: false

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v2"

      - name: "Setup node"
        uses: "actions/setup-node@v1"
        with:
          node-version: "12"

      - name: "Get yarn cache directory path"
        id: "yarn-cache-dir-path"
        run: 'echo "::set-output name=dir::$(yarn cache dir)"'

      - uses: "actions/cache@v1"
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-node-modules-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-
            ${{ runner.os }}-
      - name: "Install dependencies"
        if: steps.yarn-cache.outputs.cache-hit != 'true'
        run: 'yarn install'

      - name: "Check linter"
        run: 'yarn lint:styles'

  publish-npmjs:
    name: "Build library and publish it to NPM"
    runs-on: "${{ matrix.operating-system }}"
    needs: ["jslint", "stylelint"]

    strategy:
      matrix:
        operating-system: ["ubuntu-latest"]

    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v2"

      - name: "Install node"
        uses: "actions/setup-node@v1"
        with:
          node-version: "12"
          registry-url: "https://registry.npmjs.org"

      - name: "Extract version"
        uses: "battila7/get-version-action@v2"
        id: "get_version"

      - name: "Install package dependencies"
        run: yarn install

      - name: "Set up git since we will later push to the repo"
        run: |
          git config --global user.name "GitHub CD bot"
          git config --global user.email "code@fastybird.com"

      - name: "Upgrade npm version in package.json to the tag used in the release"
        run: npm version ${{ steps.get_version.outputs.version-without-v }} --allow-same-version

      - name: "Build the project"
        run: yarn build

      - name: "Publish to NPM"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPMJS_TOKEN }}
        run: npm publish --access public

  publish-github:
    name: "Build library and publish it to Github packages"
    runs-on: "${{ matrix.operating-system }}"
    needs: ["publish-npmjs"]

    strategy:
      matrix:
        operating-system: ["ubuntu-latest"]

    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v2"

      - name: "Install node"
        uses: "actions/setup-node@v1"
        with:
          node-version: "12"
          registry-url: "https://npm.pkg.github.com"

      - name: "Extract version"
        uses: "battila7/get-version-action@v2"
        id: "get_version"

      - name: "Install package dependencies"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: yarn install

      - name: "Set up git since we will later push to the repo"
        run: |
          git config --global user.name "GitHub CD bot"
          git config --global user.email "code@fastybird.com"

      - name: "Upgrade npm version in package.json to the tag used in the release"
        run: npm version ${{ steps.get_version.outputs.version-without-v }} --allow-same-version

      - name: "Build the project"
        run: yarn build

      - name: "Publish to NPM"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npm publish --access public

  build-storybook:
    name: "Build Storybook and publish it to Github pages"
    runs-on: "${{ matrix.operating-system }}"
    needs: ["jslint", "stylelint"]

    strategy:
      matrix:
        operating-system: ["ubuntu-latest"]

    if: github.event_name == 'push' && contains(github.ref, 'refs/heads/master')

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v2"
        with:
          persist-credentials: false

      - name: "Setup node"
        uses: "actions/setup-node@v1"
        with:
          node-version: "12"

      - name: "Install dependencies"
        run: yarn install

      - name: "Deploy"
        run: yarn storybook:deploy -- --ci
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
